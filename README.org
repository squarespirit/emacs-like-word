* Emacs config
The keybindings are kind of a compromise between Emacs and IntelliJ. I'll actually explain some of the design of the config here.
** Basic editing
The approach is to use cua mode, and also bind familiar shortcuts like C-s, C-f, and C-o, because they are so commonly used in other apps. This helps avoid shellshock when switching to Emacs.

This causes lots of key conflicts, but it is possible to work around many of them. The C-x/C-c maps are also available through some function keys.

Ivy is used for completion, and swiper for search at C-f.

| Key       | Map                              | Reason/inspiration        | Overrides      | Instead use |
|-----------+----------------------------------+---------------------------+----------------+-------------|
| C-z       | Undo                             | cua-mode                  | Suspend        |             |
| C-x       | Cut                              | cua-mode                  | C-x map        | C-S-x, F5   |
| C-c       | Copy                             | cua-mode                  | C-c map        | C-S-c, F6   |
| C-v       | Paste (major modes can override) | cua-mode                  | Page down      | PgDn        |
| C-S-v     | Paste as plain text              |                           |                |             |
| F5        | C-x map even when mark is active |                           |                |             |
| F6        | C-c map even when mark is active |                           |                |             |
| C-s       | Save                             | Many apps                 | Search         | C-f         |
| C-f       | Find (w/ Swiper)                 | Many apps                 | Next char      | Arrow keys  |
| C-o       | Open file                        | Many apps                 | Open line      | Enter, Left |
| M-Spc     | Set mark                         | More ergonomic than C-Spc | Just one space | Not rebound |
| C-w/C-S-w | Expand/contract region           | IntelliJ                  | Cut            | C-x         |

** Window management
I think windmove is the sanest way to switch windows. It's not bound anywhere though...
other-window, delete-window, and delete-other-windows are also important, but don't have great keybindings by default.
| Key   | Map                                                | Overrides         |
|-------+----------------------------------------------------+-------------------|
| F9    | Other window                                       |                   |
| M-o   | Other window                                       | Something useless |
| F10   | Delete other windows                               |                   |
| S-Esc | keyboard escape quit (which deletes other windows) |                   |

** Buffer switching
I think modern editors have a few different buffer switchers:
- Tabs: ok for a few buffers, but do not scale well to many buffers
- C-Tab: single-press to switch buffers. Press again to switch further between the most recently used.
- C-e: search for buffer by name
Both VScode and IntelliJ have all of these. They're here too
| Key           | Map                 | Overrides                 |
|---------------+---------------------+---------------------------|
| C-F4          | Kill current buffer |                           |
| C-PgUp/Pgdn   | Next/previous tab   |                           |
| C-S-Pgup/pgdn | Rearrange tabs      |                           |
| C-e           | Switch buffer       | End - use End key instead |
| C-Tab         | Switch buffer       |                           |

** Projects
Projectile is used for poject management.
C-S-f is like IntelliJ/Vscode, and C-S-n is like IntelliJ..
| Key   | Map                  |
|-------+----------------------|
| M-p   | Project menu         |
| C-S-f | Search in project    |
| C-S-n | Find file in project |
