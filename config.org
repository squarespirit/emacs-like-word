* Packages
Using approach here https://medium.com/@suvratapte/configuring-emacs-from-scratch-use-package-c30382297877.
use-package :ensure is used to install packages.
However, use-package must first be installed.
#+BEGIN_SRC emacs-lisp
(require 'package)
(package-initialize)
(add-to-list 'package-archives
             '("melpa" . "https://melpa.org/packages/") t)
(when (not (package-installed-p 'use-package))
  (package-refresh-contents)
  (package-install 'use-package))

(require 'use-package-ensure)
(setq use-package-always-ensure t)

;;; Keybinds for basic editing
;; Make esc cancel like C-g
;; https://www.reddit.com/r/emacs/comments/67rlfr/esc_vs_cg/dgsozkc/
;; (define-key key-translation-map (kbd "ESC") (kbd "C-g"))
;; https://stackoverflow.com/a/650386
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)
;; I think CUA mode really reduces confusion when switching to other apps
(cua-mode t)
(global-set-key (kbd "C-s") 'save-buffer)
(global-set-key (kbd "C-w") 'kill-this-buffer)
(global-set-key (kbd "C-S-q") 'save-buffers-kill-terminal)
;; C-o open; complicated stuff to open w/ GUI instead of command line
;; https://stackoverflow.com/a/26484229
;; (global-set-key (kbd "C-o") 'menu-find-file-existing)
;; (defadvice find-file-read-args (around find-file-read-args-always-use-dialog-box act)
;;   "Simulate invoking menu item as if by the mouse; see `use-dialog-box'."
;;   (let ((last-nonmenu-event nil))
;;     ad-do-it))
(global-set-key (kbd "C-o") 'find-file)
;; Backspace/delete should not copy to clipboard
;; http://ergoemacs.org/emacs/emacs_kill-ring.html
(defun my-delete-word (arg)
  "Delete characters forward until encountering the end of a word.
With argument, do this that many times.
This command does not push text to `kill-ring'."
  (interactive "p")
  (delete-region
   (point)
   (progn
     (forward-word arg)
     (point))))
(defun my-backward-delete-word (arg)
  "Delete characters backward until encountering the beginning of a word.
With argument, do this that many times.
This command does not push text to `kill-ring'."
  (interactive "p")
  (my-delete-word (- arg)))
(global-set-key (kbd "<C-backspace>") 'my-backward-delete-word)
(global-set-key (kbd "<C-delete>") 'my-delete-word)

;; Use C-f to do searches
(global-set-key (kbd "C-f") 'isearch-forward)
;; Switch to minibuffer when starting search
;; Doesn't work
;; (defun switch-to-minibuffer ()
;;   (if (active-minibuffer-window)
;;       (select-window (active-minibuffer-window))))
;; (add-hook 'isearch-mode-hook 'switch-to-minibuffer)
;; Allow ctrl sequences to edit the search
;; Seems like only in emacs 27.1
(setq-default search-exit-option 'edit)
(setq-default isearch-allow-scroll t)
(define-key isearch-mode-map (kbd "C-f") 'isearch-repeat-forward)
(define-key isearch-mode-map (kbd "<f3>") 'isearch-repeat-forward)
(define-key isearch-mode-map (kbd "<S-f3>") 'isearch-repeat-backward)
(define-key isearch-mode-map (kbd "<escape>") 'isearch-abort)
;; Make it like search in other apps;
;; enter gives you the next result.
;; esc to exit.
;; Note: C-g still aborts the search and returns to original location
;; Important: bind as <return> (for GUIs) and not RET (for terminals)
;; http://ergoemacs.org/emacs/emacs_key_notation_return_vs_RET.html
;; Actually, don't do this. With the defaults (return = exit search,
;; esc = abort search), you can choose where to end up after search.
;; (define-key isearch-mode-map (kbd "<return>") 'isearch-repeat-forward)
;; (define-key isearch-mode-map (kbd "<S-return>") 'isearch-repeat-backward)
;; (define-key isearch-mode-map (kbd "<escape>") 'isearch-exit)
;; Auto wrap isearch https://stackoverflow.com/a/287067
;;(defadvice isearch-search (after isearch-no-fail activate)
;;  (unless isearch-success
;;    (ad-disable-advice 'isearch-search 'after 'isearch-no-fail)
;;    (ad-activate 'isearch-search)
;;    (isearch-repeat (if isearch-forward 'forward))
;;    (ad-enable-advice 'isearch-search 'after 'isearch-no-fail)
;;    (ad-activate 'isearch-search)))
;; Prevents issue where you have to press backspace twice when
;; trying to remove the first character that fails a search
(define-key isearch-mode-map [remap isearch-delete-char] 'isearch-del-char)
;;
(setq-default isearch-nonincremental t)

;; Make it easier to switch windows
;; Why f12 is better than f10: My RH is commonly on the arrow keys, actually.
;; So f12 is closer.
(global-set-key (kbd "<f12>") 'other-window)
(global-set-key (kbd "<S-f12>") 'delete-other-windows)
(global-set-key (kbd "<M-f12>") 'delete-window)
(defun ergo-split-window ()
  (interactive)
  (let ((new-win
	 (if (> (window-width) 160)
	     (split-window-right)
	   (split-window-below))))
    (select-window new-win)))
;; (global-set-key (kbd "<C-f12>") 'ergo-split-window)


;; Buffer switcher
;; (require 'bs)
;; (add-to-list 'bs-configurations
;;              '("targets" nil nil nil
;; 	       (lambda (buf)
;; 		 ((not (string-equal "*" (substring (buffer-name buf) 0 1)))
;; 		  "Normal"))))
;; (defun bs-show-and-goto-alternate (arg)
;;   (interactive "P")
;;   (bs-show arg)
;;   (forward-line))
;; (global-set-key (kbd "C-e") 'bs-show-and-goto-alternate)
;; (define-key bs-mode-map (kbd "<escape>") 'bs-abort)
;; A better buffer switcher, with auto isearch
(ido-mode +1)
(global-set-key (kbd "C-e") 'ido-switch-buffer)

;; Taken from VScode
(global-set-key (kbd "C-S-k") 'kill-whole-line)
;; No overwrite mode
(global-unset-key (kbd "<insert>"))

;; scroll one line at a time (less "jumpy" than defaults)
;; https://www.emacswiki.org/emacs/SmoothScrolling
(setq mouse-wheel-scroll-amount '(2 ((shift) . 2))) ;; 2 lines at a time
(setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
(setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
;; Pass through win key, so Windows keyboard shortcuts still work
(setq w32-pass-lwindow-to-system nil)
;; Unbind CUA rectangle selection (conflicts with org C-ret)
(define-key cua-global-keymap (kbd "C-<return>") nil)

;;; Looks
;; Solarized theme https://github.com/bbatsov/solarized-emacs
(setq solarized-use-variable-pitch nil)
;; Avoid all font-size changes
(setq solarized-height-minus-1 1.0)
(setq solarized-height-plus-1 1.0)
(setq solarized-height-plus-2 1.0)
(setq solarized-height-plus-3 1.0)
(setq solarized-height-plus-4 1.0)
(load-theme 'solarized-light t)
(setq-default cursor-type 'bar) 
;; Use variable pitch in org mode
;; (add-hook 'org-mode-hook 'variable-pitch-mode)
;; Note: (setq-default visual-line-mode t) was somewhat buggy. It did not work
;; when org started up sometimes. This might work
;; https://www.gnu.org/software/emacs/manual/html_node/emacs/Visual-Line-Mode.html
(global-visual-line-mode +1)
;; frame title. Why is :eval needed?
(setq frame-title-format '((:eval (if (buffer-modified-p) "• ")) "%b - Emacs " emacs-version))
(setq scroll-step 1) ;; keyboard scroll one line at a time
(setq-default scroll-margin 1)
;; Lose the scroll bar, which is only a little useful, but gain the ability to resize vertical
;; splits w/ the mouse
;; https://stackoverflow.com/a/9646770
(scroll-bar-mode -1)


;;; Files and sessions
;; https://www.johndcook.com/blog/emacs_windows/
;; Use temp folder for backup files
(setq backup-directory-alist `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms `((".*" ,temporary-file-directory t)))
;; Delete to recycle bin
(setq delete-by-moving-to-trash t)
;; UTF-8 as default encoding
(set-language-environment "UTF-8")
(setq create-lockfiles nil)

(cond
 ((string-equal system-type "windows-nt") ; Microsoft Windows
  (set-face-attribute 'default nil :font "Consolas" :height 120))
 (t (set-face-attribute 'default nil :font "DejaVu Sans Mono" :height 120)))

;; Sessions
(desktop-save-mode 1)

;;; Org
;;;; Basic Org keybindings
;; Make org give up shift-arrow keys
;; https://orgmode.org/manual/Conflicts.html
;; Must be set before org loads, so set it early
;; (setq-default org-replace-disputed-keys t)
;; Support shift-selection almost always...except editing timestamps
(setq-default org-support-shift-select 'always)

;; Looks
(setq-default org-startup-indented t)
;; More natural ellipsis
(setq org-ellipsis "⤵")
(use-package org-bullets
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

(setq-default org-special-ctrl-a/e t)
;; Do not override global C-e
(define-key org-mode-map (kbd "C-e") nil)

(require 'org)
(define-key org-mode-map (kbd "<home>") 'org-beginning-of-line)
(define-key org-mode-map (kbd "<end>") 'org-end-of-line)

;; Special paste in org mode
;; Redefine `yank` for org-mode. cua-paste indirectly calls it.
;; Note: if paste has bugs, run original-yank
(fset 'original-yank (symbol-function 'yank))
(defun yank (&optional arg)
  (interactive "P")
  (if (eq major-mode 'org-mode)
      ;; Copied from definition of org-paste-special
      (cond
       ((org-at-table-p) (org-table-paste-rectangle))
       ((org-kill-is-subtree-p) (org-paste-subtree arg))
       (t (original-yank arg)))
    (original-yank arg)))

;; Great command for subtree editing
;; Except, while org-mark-subtree puts the point at the beginning of the
;; selection, put it at the end, which may be more natural for
;; word processors
;; No, don't do that anymore. Subtrees can get big; keep the mark on the
;; heading since it's nice to see the heading of the subtree you selected.
;; Consecutive calls mark bigger subtrees.
;; Bug: the subtree is not shift selected, so arrow keys do not cancel
;; the selection
(defun my-mark-subtree (&optional up)
  (interactive "P")
  (if (eq last-command 'my-mark-subtree)
      (outline-up-heading 1)) ; move up 1 level
  (org-mark-subtree up))
;; Y looks like a tree :)
(define-key org-mode-map (kbd "C-y") 'my-mark-subtree)

;; Previous/next heading with smart beginning of line

;; Overcomplicated solution to go to the parent heading. Not used.
;; Not just outline-up-heading because if you are *not* on a heading
;; line, it essentially moves up two headings. Only move up one.
;; (defun my-parent-heading (arg)
;;   (interactive "p")
;;   (if (org-at-heading-p)
;;       (if (equal 1 (funcall outline-level))
;; 	  (org-previous-visible-heading arg)
;; 	(outline-up-heading arg))
;;       (org-previous-visible-heading arg))
;;   (org-beginning-of-line))
(defun my-previous-visible-heading (arg)
  (interactive "p")
  (org-previous-visible-heading arg)
  (org-beginning-of-line))
(define-key org-mode-map (kbd "C-P") 'my-previous-visible-heading)
(defun my-next-visible-heading (arg)
  (interactive "p")
  (org-next-visible-heading arg)
  (org-beginning-of-line))
(define-key org-mode-map (kbd "C-N") 'my-next-visible-heading)

(defun my-backward-heading-same-level (arg)
  (interactive "p")
  (org-backward-heading-same-level arg)
  (org-beginning-of-line))
(define-key org-mode-map (kbd "C-S-P") 'my-backward-heading-same-level)
(defun my-forward-heading-same-level (arg)
  (interactive "p")
  (org-forward-heading-same-level arg)
  (org-beginning-of-line))
(define-key org-mode-map (kbd "C-S-N") 'my-forward-heading-same-level)


;; Previous/next paragraph with smart beginning of line
;; Unbind C-S-up/down so that shift selection can take place.
;; They were org-clock-timestamps-up/down.
;; https://orgmode.org/manual/Clocking-commands.html
;; May be controversial.
(define-key org-mode-map (kbd "<C-S-up>") nil)
(define-key org-mode-map (kbd "<C-S-down>") nil)
(defun my-backward-paragraph ()
  (interactive "^")
  ;; If we're at the smart beginning of line (in front of stars),
  ;; org-backward-paragraph just goes to the actual beginning of line
  ;; (not the previous paragraph). So this is needed.
  (beginning-of-line)
  (org-backward-paragraph)
  ;; When mark is active, we want actual beginning of line, in order to
  ;; select headings.
  (unless mark-active
    (org-beginning-of-line)))
(define-key org-mode-map (kbd "<C-up>") 'my-backward-paragraph)
(defun my-forward-paragraph ()
  (interactive "^")
  (beginning-of-line)
  (org-forward-paragraph)
  (unless mark-active
    (org-beginning-of-line)))
(define-key org-mode-map (kbd "<C-down>") 'my-forward-paragraph)

;; Swap M-left/right and S-M-left/right, so that all the unshifted
;; M-<arrow keys> work on subtrees.
;; May be very controversial.
;; Implementation is hacky here; based on copying the original org functions
;; (e.g. org-metaleft) and swapping out parts.
(defun my-metaleft (&optional _arg)
  "Promote subtree, list item at point or move table column left.

This function runs the hook `org-metaleft-hook' as a first step,
and returns at first non-nil value."
  (interactive "P")
  (cond
   ((run-hook-with-args-until-success 'org-metaleft-hook))
   ((org-at-table-p) (org-call-with-arg 'org-table-move-column 'left))
   ;; Promote subtree
   ((org-at-heading-p) (call-interactively 'org-promote-subtree))
   ;; At an inline task.
   ((org-at-heading-p)
    (call-interactively 'org-inlinetask-promote))
   ;; Promote item subtree
   ((if (not (org-region-active-p)) (org-at-item-p)
      (save-excursion (goto-char (region-beginning))
		      (org-at-item-p)))
    (call-interactively 'org-outdent-item-tree))
   (t (call-interactively 'backward-word))))
(define-key org-mode-map (kbd "<M-left>") 'my-metaleft)

(defun my-shiftmetaleft ()
  "Promote individual item or delete table column."
  (interactive)
  (cond
   ((run-hook-with-args-until-success 'org-shiftmetaleft-hook))
   ((org-at-table-p) (call-interactively 'org-table-delete-column))
   ;; Promote individual heading
   ((org-with-limited-levels
     (or (org-at-heading-p)
	 (and (org-region-active-p)
	      (save-excursion
		(goto-char (region-beginning))
		(org-at-heading-p)))))
    (when (org-check-for-hidden 'headlines) (org-hidden-tree-error))
    (call-interactively 'org-do-promote))
   ;; Promote individual item
   ((or (org-at-item-p)
	(and (org-region-active-p)
	     (save-excursion
	       (goto-char (region-beginning))
	       (org-at-item-p))))
    (when (org-check-for-hidden 'items) (org-hidden-tree-error))
    (call-interactively 'org-outdent-item))
   (t (org-modifier-cursor-error))))
(define-key org-mode-map (kbd "<M-S-left>") 'my-shiftmetaleft)

(defun my-metaright (&optional _arg)
  "Demote subtree, list item at point or move table column right.

In front of a drawer or a block keyword, indent it correctly.

This function runs the hook `org-metaright-hook' as a first step,
and returns at first non-nil value."
  (interactive "P")
  (cond
   ((run-hook-with-args-until-success 'org-metaright-hook))
   ((org-at-table-p) (call-interactively 'org-table-move-column))
   ((org-at-drawer-p) (call-interactively 'org-indent-drawer))
   ((org-at-block-p) (call-interactively 'org-indent-block))
   ;; Demote heading subtree
   ((org-at-heading-p) (call-interactively 'org-demote-subtree))
   ;; At an inline task.
   ((org-at-heading-p)
    (call-interactively 'org-inlinetask-demote))
   ;; Demote item tree
   ((if (not (org-region-active-p)) (org-at-item-p)
      (save-excursion (goto-char (region-beginning))
		      (org-at-item-p)))
    (call-interactively 'org-indent-item-tree))
   (t (call-interactively 'forward-word))))
(define-key org-mode-map (kbd "<M-right>") 'my-metaright)

(defun my-shiftmetaright ()
  "Demote individual heading or insert table column."
  (interactive)
  (cond
   ((run-hook-with-args-until-success 'org-shiftmetaright-hook))
   ((org-at-table-p) (call-interactively 'org-table-insert-column))
   ;; Demote individual heading
   ((org-with-limited-levels
     (or (org-at-heading-p)
	 (and (org-region-active-p)
	      (save-excursion
		(goto-char (region-beginning))
		(org-at-heading-p)))))
    (when (org-check-for-hidden 'headlines) (org-hidden-tree-error))
    (call-interactively 'org-do-demote))
   ;; Demote individual item
   ((or (org-at-item-p)
	(and (org-region-active-p)
	     (save-excursion
	       (goto-char (region-beginning))
	       (org-at-item-p))))
    (when (org-check-for-hidden 'items) (org-hidden-tree-error))
    (call-interactively 'org-indent-item))
   (t (org-modifier-cursor-error))))
(define-key org-mode-map (kbd "<M-S-right>") 'my-shiftmetaright)

;; (setq-default org-agenda-sorting-strategy '(timestamp-up))
;; Numeric priorities. TODO this does not appear to work
;; (setq-default org-priority-highest 1)
;; (setq-default org-priority-lowest 3)
;; (setq-default org-priority-default 2)

;; Todo states
(define-key org-mode-map (kbd "C-t") 'org-todo)
(setq org-todo-keywords '((sequence "TODO(t)" "WAIT(w)" "|" "DONE(d)")))

;; org goto - nice way to move around
(define-key org-mode-map (kbd "C-j") 'org-goto)
;; Make esc exit.
;; Would add this function as advice; but org-goto--set-map seems to be
;; private
;; (defun add-extra-keys-to-org-goto-map ()
;;  (define-key org-goto-map (kbd "<escape>") 'org-goto-quit))
;; (add-function 'org-goto--set-map)
;; And left/right should not exit; that is quite jarring.
;; Actually this is maybe not a good idea.
;; (defun org-goto-left ()
;;   (interactive)
;;   (backward-char))
;; (defun org-goto-right ()
;;   (interactive)
;;   (forward-char))

;; Suggested global keybinds in https://orgmode.org/manual/Activation.html
(global-set-key (kbd "C-c l") 'org-store-link)
(global-set-key (kbd "C-c a") 'org-agenda)
(global-set-key (kbd "C-c c") 'org-capture)
;; https://orgmode.org/worg/org-tutorials/org-column-view-tutorial.html
(setq-default org-columns-default-format "%50ITEM %TODO %1PRIORITY %20TAGS %20DEADLINE %20SCHEDULED")

;;; Agenda
(require 'org-agenda)
(define-key org-agenda-mode-map (kbd "<escape>") 'org-agenda-quit)
(defun org-agenda-cannot-be-saved ()
  (interactive)
  (user-error "Org agenda cannot be saved"))
(define-key org-agenda-mode-map (kbd "C-s") 'org-agenda-cannot-be-saved)
;; http://pragmaticemacs.com/emacs/org-mode-basics-vii-a-todo-list-with-schedules-and-deadlines/
;;warn me of any deadlines in next 7 days
(setq org-deadline-warning-days 7)
;;show me tasks scheduled or due in next fortnight
(setq org-agenda-span (quote fortnight))
;;don't show tasks as scheduled if they are already shown as a deadline
;; (setq org-agenda-skip-scheduled-if-deadline-is-shown t)
;;don't give awarning colour to tasks with impending deadlines
;;if they are scheduled to be done
(setq org-agenda-skip-deadline-prewarning-if-scheduled (quote pre-scheduled))
;;don't show tasks that are scheduled or have deadlines in the
;;normal todo list
;; Then, the global todo list becomes a way to check what todos
;; are not scheduled
(setq org-agenda-todo-ignore-deadlines (quote all))
(setq org-agenda-todo-ignore-scheduled (quote all))


;;; Which key
(which-key-mode 1)

;;; Tabs
(use-package centaur-tabs
  :demand
  :config
  (centaur-tabs-mode t)
  :bind
  ("C-<prior>" . centaur-tabs-backward)
  ("C-<next>" . centaur-tabs-forward))
(setq centaur-tabs-style "bar")
(setq centaur-tabs-height 32)
;; (setq centaur-tabs-set-icons t) ; Unfortunately, icons are very slow on windows...
(setq centaur-tabs-set-bar 'over)
(setq centaur-tabs-cycle-scope 'tabs)
(defun centaur-tabs-buffer-groups ()
 (list
  (cond
   ((string-equal "*" (substring (buffer-name) 0 1)) "Emacs")
   (t "text"))))
;; I never want to switch to the Emacs buffers anyway.
;; This is naive but at least reduces confusion about multiple groups
;; (defun centaur-tabs-buffer-groups () (list "single-group"))
(setq centaur-tabs-set-modified-marker t)
(setq centaur-tabs-modified-marker "●")
;; https://github.com/ema2159/centaur-tabs/blob/master/centaur-tabs-elements.el
(set-face-attribute 'centaur-tabs-selected nil :background "#FDFDFD" :foreground "black")
(set-face-attribute 'centaur-tabs-selected-modified nil :background "#FDFDFD" :foreground "black")
(set-face-attribute 'centaur-tabs-unselected nil :background "#CCCCCC" :foreground "black")
(set-face-attribute 'centaur-tabs-unselected-modified nil :background "#CCCCCC" :foreground "black")

;;; Customize
(setq custom-file "~/.emacs.d/custom.el")
(load custom-file)
#+END_SRC
