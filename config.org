* Packages
Using approach here https://medium.com/@suvratapte/configuring-emacs-from-scratch-use-package-c30382297877.
use-package :ensure is used to install packages.
However, use-package must first be installed.
#+BEGIN_SRC emacs-lisp
(require 'package)
(package-initialize)
(add-to-list 'package-archives
             '("melpa" . "https://melpa.org/packages/") t)
(when (not (package-installed-p 'use-package))
  (package-refresh-contents)
  (package-install 'use-package))

(require 'use-package-ensure)
(setq use-package-always-ensure t)
#+END_SRC
* Basic editing
#+BEGIN_SRC emacs-lisp
;; Make esc cancel like C-g
;; https://www.reddit.com/r/emacs/comments/67rlfr/esc_vs_cg/dgsozkc/
;; This seems to work the best.
(define-key key-translation-map (kbd "ESC") (kbd "C-g"))
;; https://stackoverflow.com/a/650386
;; (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
;; Issues with binding to 'keyboard-escape-quit: ESC can kill other windows
;; Issues with binding to 'keyboard-quit: ESC can't exit minibuffer and many
;; other things

;; Rebind some stuff that causes me pain
(require 'bind-key)
(bind-keys
 ("C-s" . save-buffer) ;; I'm sorry, there's just way too much muscle memory here.
 ("C-o" . find-file)
 ("M-/" . exchange-point-and-mark))
;; Rebind to rectangle commands
(bind-key "M-r" (lookup-key (current-global-map) (kbd "C-x r")))

;; Rebind CUA rectangle selection (conflicts with org C-ret)
;; Needs to happen before turning on cua mode
(setq cua-rectangle-mark-key (kbd "<C-M-return>"))
;; Use it for improved selection abilities
(cua-mode t)
;; Do not rebind cut, copy, paste though
(cua-selection-mode t)

;; Unbind this - can use page up/down instead.
;; I keep hitting it accidentally to paste though.
(bind-keys ("C-v" . cua-paste))


;; Backspace/delete should not copy to clipboard
;; http://ergoemacs.org/emacs/emacs_kill-ring.html
(defun mw-delete-word-no-cut (arg)
  "Delete characters forward until encountering the end of a word.
With argument, do this that many times.
This command does not push text to `kill-ring'."
  (interactive "p")
  (delete-region
   (point)
   (progn
     (forward-word arg)
     (point))))
(defun my-backward-delete-word-no-cut (arg)
  "Delete characters backward until encountering the beginning of a word.
With argument, do this that many times.
This command does not push text to `kill-ring'."
  (interactive "p")
  (my-delete-word (- arg)))
(bind-keys
 ("<C-backspace>" . my-backward-delete-word-no-cut)
 ("<C-delete>" . my-delete-word-no-cut)
 ;; M-backspace is already backward-kill-word.
 ;; M-backspace and M-delete both overwrite the clipboard. 
 ("<M-delete>" . kill-word))

;; change all yes-or-no prompts to y or n
(fset 'yes-or-no-p 'y-or-n-p)

;; No overwrite mode
(global-unset-key (kbd "<insert>"))

;; Warning: works ok on real code, doesn't work that well in org mode source blocks
(bind-keys ("C-/" . comment-line))

;; No Ctrl-home/end. I rarely intend to press it, though I often press it accidentally
(global-unset-key (kbd "<C-home>"))
(global-unset-key (kbd "<C-end>"))

;; Pass through win key, so Windows keyboard shortcuts still work
(setq w32-pass-lwindow-to-system t)

;; Mouse
;; Let shift-click extend selection
(bind-keys ("<S-down-mouse-1>" . mouse-save-then-kill))
#+END_SRC
** Undo
#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :bind (("C-z" . undo)
         ("C-S-z" . undo-tree-redo)
         ("C-M-z" . undo-tree-visualize))
  :config
  (global-undo-tree-mode 1)
  ;; Unbind to not conflict with commenting
  (define-key undo-tree-map (kbd "C-/") nil))
#+END_SRC
** Parens
#+BEGIN_SRC emacs-lisp
(use-package smartparens
  :config
  (smartparens-global-mode 1)
  (show-smartparens-global-mode t)
  (setq-default sp-show-pair-delay 0))
#+end_src
** Help
#+begin_src emacs-lisp
;; Think this makes help more consistent with other things that open windows,
;; and makes the help easier to quit.
;; (setq-default help-window-select t)

(define-key help-mode-map (kbd "<escape>") 'quit-window)
#+end_src
** Expand region
#+BEGIN_SRC emacs-lisp
;; TODO new key for this
;; (use-package expand-region
;;   :bind (("C-y" . er/expand-region)
;;          ("C-S-y" . er/contract-region)))
#+END_SRC
** M-x
Main advantage of smex is that now up/down in M-x will cycle through your most recent commands.
#+BEGIN_SRC emacs-lisp
(use-package smex)
#+END_SRC
** Completion
#+BEGIN_SRC emacs-lisp
(use-package company
  :hook (after-init-hook . global-company-mode))
;; TODO: What to bind completion function
  ;;:bind (("M-SPC" . company-complete)))
#+end_src
** Old ctrl-f
#+begin_example
;; Use C-f to do searches
(global-set-key (kbd "C-f") 'isearch-forward)
;; Switch to minibuffer when starting search
;; Doesn't work
;; (defun switch-to-minibuffer ()
;;   (if (active-minibuffer-window)
;;       (select-window (active-minibuffer-window))))
;; (add-hook 'isearch-mode-hook 'switch-to-minibuffer)
;; Allow ctrl sequences to edit the search
;; Seems like only in emacs 27.1
(setq-default search-exit-option 'edit)
(setq-default isearch-allow-scroll t)
(define-key isearch-mode-map (kbd "C-f") 'isearch-repeat-forward)
(define-key isearch-mode-map (kbd "<f3>") 'isearch-repeat-forward)
(define-key isearch-mode-map (kbd "<S-f3>") 'isearch-repeat-backward)
(define-key isearch-mode-map (kbd "<escape>") 'isearch-abort)
;; Make it like search in other apps;
;; enter gives you the next result.
;; esc to exit.
;; Note: C-g still aborts the search and returns to original location
;; Important: bind as <return> (for GUIs) and not RET (for terminals)
;; http://ergoemacs.org/emacs/emacs_key_notation_return_vs_RET.html
;; Actually, don't do this. With the defaults (return = exit search,
;; esc = abort search), you can choose where to end up after search.
;; (define-key isearch-mode-map (kbd "<return>") 'isearch-repeat-forward)
;; (define-key isearch-mode-map (kbd "<S-return>") 'isearch-repeat-backward)
;; (define-key isearch-mode-map (kbd "<escape>") 'isearch-exit)
;; Auto wrap isearch https://stackoverflow.com/a/287067
;;(defadvice isearch-search (after isearch-no-fail activate)
;;  (unless isearch-success
;;    (ad-disable-advice 'isearch-search 'after 'isearch-no-fail)
;;    (ad-activate 'isearch-search)
;;    (isearch-repeat (if isearch-forward 'forward))
;;    (ad-enable-advice 'isearch-search 'after 'isearch-no-fail)
;;    (ad-activate 'isearch-search)))
;; Prevents issue where you have to press backspace twice when
;; trying to remove the first character that fails a search
(define-key isearch-mode-map [remap isearch-delete-char] 'isearch-del-char)
;;
(setq-default isearch-nonincremental t)
#+end_example
* Ivy/counsel
https://oremacs.com/swiper/#getting-started
Ivy is quite important, so load it early.
#+BEGIN_SRC emacs-lisp
(use-package counsel
  ;; It appears that without this demand, projectile isn't loaded on demand
  :demand
  :config
  (ivy-mode 1)
  (counsel-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq ivy-count-format "(%d/%d) ")
  ;; Prevent backspace from closing the buffer, a little surprising
  (setq ivy-on-del-error-function nil)
  ;; Seems pretty important, so that in Ctrl+f, pressing down or up can cycle
  (setq ivy-wrap t)
  ;; Only real buffers
  (setq ivy-ignore-buffers '("\\` " "\\`\\*"))
  :bind (("C-f" . swiper-isearch)  ;; I use arrow keys instead
         ("C-o" . counsel-find-file)
         ("C-e" . ivy-switch-buffer)
         :map ivy-minibuffer-map
         ("<S-return>" . ivy-call)
         ("<C-return>" . ivy-immediate-done)))
#+END_SRC
* Window management
#+BEGIN_SRC emacs-lisp
(use-package ace-window
  :bind (("M-o" . ace-window))
  :config
  (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l)))
(bind-keys ("C-q" . delete-other-windows))  ;; Don't use quoted insert a lot.
(use-package transpose-frame
  :config
  (defun my-rotate-frame-clockwise-with-treemacs ()
    "Rotate windows clockwise, properly showing/hiding treemacs because it interferes."
    (interactive)
    (if (eq (treemacs-current-visibility) 'visible)
	(progn
	  (treemacs)
	  (rotate-frame-clockwise)
	  (treemacs)
          ;; Hack because at this point, the treemacs window is selected. Probably not desired
        (other-window 1))
      (rotate-frame-clockwise)))
  ;;(global-set-key (kbd "M-w") 'my-rotate-frame-clockwise-with-treemacs)
)
#+END_SRC
** Old window switcher
#+begin_example
;; Make it easier to switch windows
;; Why f12 is better than f10: My RH is commonly on the arrow keys, actually.
;; So f12 is closer.
(global-set-key (kbd "<f12>") 'other-window)
(global-set-key (kbd "<S-f12>") 'delete-other-windows)
(global-set-key (kbd "<M-f12>") 'delete-window)
(defun ergo-split-window ()
  (interactive)
  (let ((new-win
	 (if (> (window-width) 160)
	     (split-window-right)
	   (split-window-below))))
    (select-window new-win)))
;; (global-set-key (kbd "<C-f12>") 'ergo-split-window)
#+end_example
** Display alist
http://juanjose.garciaripoll.com/blog/arranging-emacs-windows/index.html
#+begin_src emacs-lisp
(setq
 ;; Kill a frame when quitting its only window
 frame-auto-hide-function 'delete-frame
 ;; Maximum number of side-windows to create on (left top right bottom)
 window-sides-slots '(1 1 1 1)
 ;; Default rules
 display-buffer-alist
 `(;; Display *Help* buffer at the bottom-most slot
   ("*\\(Help\\|trace-\\|Backtrace\\|RefTeX.*\\)"
    (display-buffer-reuse-window display-buffer-in-previous-window display-buffer-in-side-window)
    (side . bottom)
    (slot . 0)
    (window-height . 0.33)
    (reusable-frames . visible))
   ("^\\*info"
    (display-buffer-reuse-window display-buffer-in-previous-window display-buffer-pop-up-frame)
    (pop-up-frame-parameters
      (width . 80)
      (left . 1.0)
      (fullscreen . fullheight)))
   ;; Open new edited messages in a right-hand frame
   ;; For this to close the frame, add
   ;; (add-hook 'wl-draft-kill-pre-hook 'quit-window)
   ("\\(\\*draft\\*\\|Draft/\\)"
    (display-buffer-reuse-window display-buffer-in-previous-window display-buffer-pop-up-frame)
    (pop-up-frame-parameters
      (width . 80)
      (left . 1.0)
      (fullscreen . fullheight)))
   ("^\\*Org todo"
    (display-buffer-reuse-window display-buffer-in-previous-window display-buffer-in-side-window)
    (side . bottom)
    (slot . 0)
    (window-height . 1)
    (reusable-frames . visible))
   ;; Split shells at the bottom
   ("^\\*[e]shell"
    (display-buffer-reuse-window display-buffer-in-previous-window display-buffer-below-selected)
    (window-min-height . 20)
    (window-height . 0.35)
    (reusable-frames . visible)
    )
   )
 )
#+end_src
* Buffers
** Tabs
#+BEGIN_EXAMPLE
(use-package centaur-tabs
  :demand
  :config
  (centaur-tabs-mode t)
  (setq centaur-tabs-style "bar")
  (setq centaur-tabs-height 32)
  ;; (setq centaur-tabs-set-icons t) ; Unfortunately, icons are very slow on windows...
  (setq centaur-tabs-set-bar 'over)
  (setq centaur-tabs-cycle-scope 'tabs)
  (defun centaur-tabs-buffer-groups ()
   (list
    (cond
     ((string-equal "*" (substring (buffer-name) 0 1)) "Emacs")
     (t "text"))))
  ;; I never want to switch to the Emacs buffers anyway.
  ;; This is naive but at least reduces confusion about multiple groups
  ;; (defun centaur-tabs-buffer-groups () (list "single-group"))
  (setq centaur-tabs-set-modified-marker t)
  (setq centaur-tabs-modified-marker "●")
  ;; https://github.com/ema2159/centaur-tabs/blob/master/centaur-tabs-elements.el
  (set-face-attribute 'centaur-tabs-selected nil :background "#FDFDFD" :foreground "black")
  (set-face-attribute 'centaur-tabs-selected-modified nil :background "#FDFDFD" :foreground "black")
  (set-face-attribute 'centaur-tabs-unselected nil :background "#CCCCCC" :foreground "black")
  (set-face-attribute 'centaur-tabs-unselected-modified nil :background "#CCCCCC" :foreground "black")

  :bind
  ("C-<prior>" . centaur-tabs-backward)
  ("C-<next>" . centaur-tabs-forward))
#+END_EXAMPLE
** Old ctrl-tab buffer switcher
#+begin_example
(defun switch-to-other-buffer ()
  "Switch to the most recent buffer that is a normal file"
  (interactive)
;;  (message "Initial buflist is: %S" (buffer-list (selected-frame)))
  (let
      ;; Skip first buffer in buffer-list, which is the current buffer
      ((buflist (cdr (buffer-list (selected-frame)))))
    (while
	(and
	 buflist
	 (or
          (string-prefix-p "*" (buffer-name (car buflist)))
          (string-prefix-p " *" (buffer-name (car buflist)))))
      (setq buflist (cdr buflist)))
;;    (message "Buflist is: %S" buflist)
    (if buflist
      (switch-to-buffer (car buflist)))))
(global-set-key (kbd "<C-tab>") 'switch-to-other-buffer)
#+end_example
** Ctrl-tab switcher
#+BEGIN_SRC emacs-lisp
(load-file "~/.emacs.d/pc-bufsw.el")
;; Unbind some strange key combos including M-[
(setq pc-bufsw-keys '(([C-tab]) ([C-S-tab] [C-S-iso-lefttab])))
(pc-bufsw +1)
;; More prominent selected buffer
(setq pc-bufsw-decorator-left (propertize "<" 'face 'bold))
(setq pc-bufsw-decorator-right (propertize ">" 'face 'bold))
(setq pc-bufsw-selected-buffer-face 'bold)
#+end_src
** Ctrl-e switcher
Use ivy-rich to print more info
#+begin_src emacs-lisp
(use-package ivy-rich
  :after ivy
  :config
  (setq ivy-rich-display-transformers-list
	(plist-put ivy-rich-display-transformers-list 'ivy-switch-buffer
		   '(:columns
		    ((ivy-switch-buffer-transformer (:width 30))    ; add face by the original transformer
		     (ivy-rich-switch-buffer-size (:width 7))  ; return buffer size
		     (ivy-rich-switch-buffer-indicators (:width 4 :face error :align right))  ; return buffer indicator
		     (ivy-rich-switch-buffer-major-mode (:width 12 :face warning))            ; return major mode info
;; Unfortunately these indicators are kind of slow on Windows
;;		     (ivy-rich-switch-buffer-project (:width 15 :face success))               ; return project name `projectile'
;;		     (ivy-rich-switch-buffer-path (:width (lambda (x) (ivy-rich-switch-buffer-shorten-path x (ivy-rich-minibuffer-width 0.3)))))  ; return file path relative to project root or `default-directory' if project is nil
                    )
		    :predicate
		    (lambda (cand) (get-buffer cand)))))
  (ivy-rich-mode 1))
#+end_src
** Old buffer switcher
#+begin_example
;; Buffer switcher
;; (require 'bs)
;; (add-to-list 'bs-configurations
;;              '("targets" nil nil nil
;; 	       (lambda (buf)
;; 		 ((not (string-equal "*" (substring (buffer-name buf) 0 1)))
;; 		  "Normal"))))
;; (defun bs-show-and-goto-alternate (arg)
;;   (interactive "P")
;;   (bs-show arg)
;;   (forward-line))
;; (global-set-key (kbd "C-e") 'bs-show-and-goto-alternate)
;; (define-key bs-mode-map (kbd "<escape>") 'bs-abort)
;; A better buffer switcher, with auto isearch
(ido-mode +1)
(global-set-key (kbd "C-e") 'ido-switch-buffer)
#+end_example
* Terminal
#+begin_src emacs-lisp
(defun switch-to-eshell ()
  "Switch to eshell, or hide it if you are already inside eshell."
  (interactive)
  (if (eq major-mode 'eshell-mode)
      (delete-window)
    (eshell)))
(global-set-key (kbd "C-`") 'switch-to-eshell)
#+end_src
* Looks
#+BEGIN_SRC emacs-lisp
;; Solarized theme https://github.com/bbatsov/solarized-emacs
(use-package solarized-theme
  :config
  (setq solarized-use-variable-pitch nil)
  ;; Avoid all font-size changes
  (setq solarized-height-minus-1 1.0)
  (setq solarized-height-plus-1 1.0)
  (setq solarized-height-plus-2 1.0)
  (setq solarized-height-plus-3 1.0)
  (setq solarized-height-plus-4 1.0)
  (load-theme 'solarized-light t))

(setq-default cursor-type 'bar)
(global-hl-line-mode +1)

;; Note: (setq-default visual-line-mode t) is somewhat buggy. It did not work
;; when org started up sometimes. This might work
;; https://www.gnu.org/software/emacs/manual/html_node/emacs/Visual-Line-Mode.html
(global-visual-line-mode +1)

;; frame title like vscode. Why is :eval needed?
(setq frame-title-format '((:eval (if (buffer-modified-p) "• ")) "%b - Emacs " emacs-version))

;; Makes icons faster on windows
;; https://github.com/domtronn/all-the-icons.el/issues/28#issuecomment-312089198
(setq inhibit-compacting-font-caches t)
#+END_SRC
** Scrolling
#+BEGIN_SRC emacs-lisp
;; scroll one line at a time (less "jumpy" than defaults)
;; https://www.emacswiki.org/emacs/SmoothScrolling
(setq mouse-wheel-scroll-amount '(2 ((shift) . 2))) ;; 2 lines at a time
(setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
(setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse

;; Lose the scroll bar, which is only a little useful, but gain the ability to resize vertical
;; splits w/ the mouse
;; https://stackoverflow.com/a/9646770
(scroll-bar-mode -1)

;; This does not appear to be enough - need smooth scrolling
;; Docs for scroll-step recommend against setting this and setting scroll-conservatively instead.
;; However, this appears to *slow down* scrolling thus making it less jumpy in a good way.
(setq scroll-step 1) ;; keyboard scroll one line at a time
;; I think this needs to be relatively large, otherwise scrolling can happen faster
;; than emacs redraws and the cursor can go offscreen, triggering a jump.
(setq-default scroll-margin 3)
(setq auto-window-vscroll nil)
(setq scroll-conservatively 10000)
#+END_SRC
** Modeline
;; Looks nice and has few dependencies.
#+BEGIN_SRC emacs-lisp
(use-package spaceline
  :config
  (require 'spaceline-config)
  (spaceline-emacs-theme))
#+END_SRC
* Files and sessions
#+BEGIN_SRC emacs-lisp
;; https://www.johndcook.com/blog/emacs_windows/
;; Use temp folder for backup files
(setq backup-directory-alist `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms `((".*" ,temporary-file-directory t)))
;; Delete to recycle bin
(setq delete-by-moving-to-trash t)
(setq create-lockfiles nil)

;; Prefer UTF-8 and Unix line endings for new files.
(prefer-coding-system 'utf-8-unix)

(cond
 ((string-equal system-type "windows-nt") ; Microsoft Windows
  (set-face-attribute 'default nil :font "Consolas" :height 120))
 (t (set-face-attribute 'default nil :font "DejaVu Sans Mono" :height 110)))

;; Since I use Dropbox and git heavily, this is probably a good idea
;; https://magit.vc/manual/magit/Automatic-Reverting-of-File_002dVisiting-Buffers.html
(global-auto-revert-mode +1)

;; Sessions
(desktop-save-mode 1)
#+END_SRC
** Treemacs
#+begin_src emacs-lisp
(use-package treemacs
  :config
  (treemacs-follow-mode +1)
  (define-key treemacs-mode-map (kbd "<mouse-1>") #'treemacs-single-click-expand-action)
  ;; https://github.com/hlissner/doom-emacs/issues/1177#issuecomment-464405628
;;  (defun my-treemacs-back-and-forth ()
;;    (interactive)
;;    (if (treemacs-is-treemacs-window-selected?)
;;  	(other-window 1)
;;      (treemacs-select-window)))
  (defun my-treemacs-back-and-forth ()
    "If in treemacs, close it. Otherwise, select it."
    (interactive)
    (if (treemacs-is-treemacs-window-selected?)
	(treemacs-quit)
      (treemacs-select-window)))
  ;; Cannot be bound with :bind because it's my own function defined outside the pkg
  (global-set-key (kbd "C-'") 'my-treemacs-back-and-forth))
#+end_src
* Projects
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :demand  ;; Should always be loaded
  :after ivy
  :config
  (setq projectile-completion-system 'ivy)
  (projectile-mode +1)
  ;; Unbind this so ESC exits the command map
  (define-key projectile-command-map (kbd "ESC") nil)
  ;; :bind-keymap (("C-p" . projectile-command-map))
  :bind (("C-S-f" . projectile-ripgrep)
         ("C-n" . projectile-find-file)))
#+END_SRC
* Org
** Basic org keybindings
#+BEGIN_SRC emacs-lisp
;; Make org give up shift-arrow keys
;; https://orgmode.org/manual/Conflicts.html
;; Must be set before org loads, so set it early
;; (setq-default org-replace-disputed-keys t)
;; Support shift-selection almost always...except editing timestamps
(setq-default org-support-shift-select 'always)

;; Mouse support
(require 'org-mouse)

;; Do not override these keys
(define-key org-mode-map (kbd "C-e") nil) ;; buf switcher
;; (define-key org-mode-map (kbd "C-y") nil)
(define-key org-mode-map (kbd "<C-tab>") nil) ;; tab switcher
(define-key org-mode-map (kbd "C-'") nil)

(setq-default org-special-ctrl-a/e t)
(define-key org-mode-map (kbd "<home>") 'org-beginning-of-line)
(define-key org-mode-map (kbd "<end>") 'org-end-of-line)

;; Special paste in org mode
;; Redefine `yank` for org-mode. cua-paste indirectly calls it.
;; Note: if paste has bugs, run original-yank
(fset 'original-yank (symbol-function 'yank))
(defun yank (&optional arg)
  (interactive "P")
  (if (eq major-mode 'org-mode)
      ;; Copied from definition of org-paste-special
      (cond
       ((org-at-table-p) (org-table-paste-rectangle))
       ((org-kill-is-subtree-p) (org-paste-subtree arg))
       (t (original-yank arg)))
    (original-yank arg)))
;; TODO: cleaner definition.
;; C-v: temporarily redefines `yank` then calls cua-paste.
;; C-S-v: calls normal cua-paste.
;; There may be a better way:
;; - UNBIND C-v from cua-mode. Set it in global keymap instead.
;; - In org mode map, set C-v to smart paste, C-S-v to normal paste.

;; Previous/next paragraph with smart beginning of line
;; Unbind C-S-up/down so that shift selection on paragraphs can take place.
;; They were org-clock-timestamps-up/down.
;; https://orgmode.org/manual/Clocking-commands.html
;; May be controversial.
(define-key org-mode-map (kbd "<C-S-up>") nil)
(define-key org-mode-map (kbd "<C-S-down>") nil)
;; Actually, do not do this, for simplicity/predictability.
;; (defun my-backward-paragraph ()
;;   (interactive "^")
;;   ;; If we're at the smart beginning of line (in front of stars),
;;   ;; org-backward-paragraph just goes to the actual beginning of line
;;   ;; (not the previous paragraph). So this is needed.
;;   (beginning-of-line)
;;   (org-backward-paragraph)
;;   ;; When mark is active, we want actual beginning of line, in order to
;;   ;; select headings.
;;   (unless mark-active
;;     (org-beginning-of-line)))
;; (define-key org-mode-map (kbd "<C-up>") 'my-backward-paragraph)
;; (defun my-forward-paragraph ()
;;   (interactive "^")
;;   (beginning-of-line)
;;   (org-forward-paragraph)
;;   (unless mark-active
;;     (org-beginning-of-line)))
;; (define-key org-mode-map (kbd "<C-down>") 'my-forward-paragraph)
;; Enable shift-selection on org paragraph
(defun mw-org-backward-paragraph ()
  (interactive "^")
  "Go backward to previous paragraph; allow for shift selection"
  (org-backward-paragraph))
(define-key org-mode-map (kbd "<C-up>") 'mw-org-backward-paragraph)
(defun mw-org-forward-paragraph ()
  (interactive "^")
  "Go forward to next paragraph; allow for shift selection"
  (org-forward-paragraph))
(define-key org-mode-map (kbd "<C-down>") 'mw-org-forward-paragraph)

;; Swap M-left/right and S-M-left/right, so that all the unshifted
;; M-<arrow keys> work on subtrees.
;; May be very controversial.
;; Implementation is hacky here; based on copying the original org functions
;; (e.g. org-metaleft) and swapping out parts.
(defun my-metaleft (&optional _arg)
  "Promote subtree, list item at point or move table column left.

This function runs the hook `org-metaleft-hook' as a first step,
and returns at first non-nil value."
  (interactive "P")
  (cond
   ((run-hook-with-args-until-success 'org-metaleft-hook))
   ((org-at-table-p) (org-call-with-arg 'org-table-move-column 'left))
   ;; Promote subtree
   ((org-at-heading-p) (call-interactively 'org-promote-subtree))
   ;; At an inline task.
   ((org-at-heading-p)
    (call-interactively 'org-inlinetask-promote))
   ;; Promote item subtree
   ((if (not (org-region-active-p)) (org-at-item-p)
      (save-excursion (goto-char (region-beginning))
		      (org-at-item-p)))
    (call-interactively 'org-outdent-item-tree))
   (t (call-interactively 'backward-word))))
(define-key org-mode-map (kbd "<M-left>") 'my-metaleft)

(defun my-shiftmetaleft ()
  "Promote individual item or delete table column."
  (interactive)
  (cond
   ((run-hook-with-args-until-success 'org-shiftmetaleft-hook))
   ((org-at-table-p) (call-interactively 'org-table-delete-column))
   ;; Promote individual heading
   ((org-with-limited-levels
     (or (org-at-heading-p)
	 (and (org-region-active-p)
	      (save-excursion
		(goto-char (region-beginning))
		(org-at-heading-p)))))
    (when (org-check-for-hidden 'headlines) (org-hidden-tree-error))
    (call-interactively 'org-do-promote))
   ;; Promote individual item
   ((or (org-at-item-p)
	(and (org-region-active-p)
	     (save-excursion
	       (goto-char (region-beginning))
	       (org-at-item-p))))
    (when (org-check-for-hidden 'items) (org-hidden-tree-error))
    (call-interactively 'org-outdent-item))
   (t (org-modifier-cursor-error))))
(define-key org-mode-map (kbd "<M-S-left>") 'my-shiftmetaleft)

(defun my-metaright (&optional _arg)
  "Demote subtree, list item at point or move table column right.

In front of a drawer or a block keyword, indent it correctly.

This function runs the hook `org-metaright-hook' as a first step,
and returns at first non-nil value."
  (interactive "P")
  (cond
   ((run-hook-with-args-until-success 'org-metaright-hook))
   ((org-at-table-p) (call-interactively 'org-table-move-column))
   ((org-at-drawer-p) (call-interactively 'org-indent-drawer))
   ((org-at-block-p) (call-interactively 'org-indent-block))
   ;; Demote heading subtree
   ((org-at-heading-p) (call-interactively 'org-demote-subtree))
   ;; At an inline task.
   ((org-at-heading-p)
    (call-interactively 'org-inlinetask-demote))
   ;; Demote item tree
   ((if (not (org-region-active-p)) (org-at-item-p)
      (save-excursion (goto-char (region-beginning))
		      (org-at-item-p)))
    (call-interactively 'org-indent-item-tree))
   (t (call-interactively 'forward-word))))
(define-key org-mode-map (kbd "<M-right>") 'my-metaright)

(defun my-shiftmetaright ()
  "Demote individual heading or insert table column."
  (interactive)
  (cond
   ((run-hook-with-args-until-success 'org-shiftmetaright-hook))
   ((org-at-table-p) (call-interactively 'org-table-insert-column))
   ;; Demote individual heading
   ((org-with-limited-levels
     (or (org-at-heading-p)
	 (and (org-region-active-p)
	      (save-excursion
		(goto-char (region-beginning))
		(org-at-heading-p)))))
    (when (org-check-for-hidden 'headlines) (org-hidden-tree-error))
    (call-interactively 'org-do-demote))
   ;; Demote individual item
   ((or (org-at-item-p)
	(and (org-region-active-p)
	     (save-excursion
	       (goto-char (region-beginning))
	       (org-at-item-p))))
    (when (org-check-for-hidden 'items) (org-hidden-tree-error))
    (call-interactively 'org-indent-item))
   (t (org-modifier-cursor-error))))
(define-key org-mode-map (kbd "<M-S-right>") 'my-shiftmetaright)

;; (setq-default org-agenda-sorting-strategy '(timestamp-up))
;; Numeric priorities. TODO this does not appear to work
;; (setq-default org-priority-highest 1)
;; (setq-default org-priority-lowest 3)
;; (setq-default org-priority-default 2)

;; Todo states
(define-key org-mode-map (kbd "C-t") 'org-todo)
(setq org-todo-keywords '((sequence "TODO(t)" "WAIT(w)" "|" "DONE(d)")))

;; org goto - nice way to move around
(define-key org-mode-map (kbd "C-j") 'org-goto)
;; Would really like to make esc exit. However, this doesn't appear to work
;; Seems to be the most up-to-date source code of org
;; https://github.com/bzg/org-mode/blob/master/lisp/org-goto.el
;; (defun add-extra-keys-to-org-goto-map (&rest)
;;   (message "Adding escape to org goto map")
;;   (define-key org-goto-map (kbd "<escape>") 'org-goto-quit)
;;   (message "Value of escape is %s" (lookup-key org-goto-map (kbd "<escape>"))))
;; (advice-add 'org-goto-location :before #'add-extra-keys-to-org-goto-map)
;; And left/right should not exit; that is quite jarring.
;; Actually this is maybe not a good idea.
;; (defun org-goto-left ()
;;   (interactive)
;;   (backward-char))
;; (defun org-goto-right ()
;;   (interactive)
;;   (forward-char))

;; Suggested global keybinds in https://orgmode.org/manual/Activation.html
(global-set-key (kbd "C-c l") 'org-store-link)
(global-set-key (kbd "C-c a") 'org-agenda)
(global-set-key (kbd "C-c c") 'org-capture)
;; https://orgmode.org/worg/org-tutorials/org-column-view-tutorial.html
(setq-default org-columns-default-format "%50ITEM %TODO %1PRIORITY %20TAGS %20DEADLINE %20SCHEDULED")

(define-key org-mode-map (kbd "M-[") 'org-previous-visible-heading)
(define-key org-mode-map (kbd "M-]") 'org-next-visible-heading)

;; src editing configs
(setq org-src-tab-acts-natively t)
(setq org-edit-src-content-indentation 0)

(add-to-list 'org-structure-template-alist '("L" . "src emacs-lisp"))
#+END_SRC
*** Old select subtree
No longer needed with expand-region.
#+begin_example
;; Great command for subtree editing
;; Except, while org-mark-subtree puts the point at the beginning of the
;; selection, put it at the end, which may be more natural for
;; word processors
;; No, don't do that anymore. Subtrees can get big; keep the mark on the
;; heading since it's nice to see the heading of the subtree you selected.
;; Consecutive calls mark bigger subtrees.
;; Bug: the subtree is not shift selected, so arrow keys do not cancel
;; the selection
;; (defun my-mark-subtree (&optional up)
;;   (interactive "P")
;;   (if (eq last-command 'my-mark-subtree)
;;       (outline-up-heading 1)) ; move up 1 level
;;   (org-mark-subtree up))
;; ;; Y looks like a tree :)
;; (define-key org-mode-map (kbd "C-y") 'my-mark-subtree)
#+end_example
*** Old go to previous/next heading
#+begin_example
;; Previous/next heading with smart beginning of line

;; Overcomplicated solution to go to the parent heading. Not used.
;; Not just outline-up-heading because if you are *not* on a heading
;; line, it essentially moves up two headings. Only move up one.
;; (defun my-parent-heading (arg)
;;   (interactive "p")
;;   (if (org-at-heading-p)
;;       (if (equal 1 (funcall outline-level))
;; 	  (org-previous-visible-heading arg)
;; 	(outline-up-heading arg))
;;       (org-previous-visible-heading arg))
;;   (org-beginning-of-line))
;; (defun my-previous-visible-heading (arg)
;;   (interactive "p")
;;   (org-previous-visible-heading arg)
;;   (org-beginning-of-line))
;; (define-key org-mode-map (kbd "C-P") 'my-previous-visible-heading)
;; (defun my-next-visible-heading (arg)
;;   (interactive "p")
;;   (org-next-visible-heading arg) 
;;   (org-beginning-of-line))       
;; (define-key org-mode-map (kbd "C-N") 'my-next-visible-heading)
;;                                  
;; (defun my-backward-heading-same-level (arg)
;;   (interactive "p")              
;;   (org-backward-heading-same-level arg)
;;   (org-beginning-of-line))       
;; (define-key org-mode-map (kbd "C-S-P") 'my-backward-heading-same-level)
;; (defun my-forward-heading-same-level (arg)
;;   (interactive "p")              
;;   (org-forward-heading-same-level arg)
;;   (org-beginning-of-line))
;; (define-key org-mode-map (kbd "C-S-N") 'my-forward-heading-same-level)
#+end_example
** Org looks
#+BEGIN_SRC emacs-lisp
(setq-default
  org-startup-indented t
  org-startup-folded 'content
  org-startup-with-inline-images t)
;; More natural ellipsis
(setq org-ellipsis "⤵")
(use-package org-bullets
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC
** Agenda
#+BEGIN_SRC emacs-lisp
(require 'org-agenda)
;; Easier access to agenda
(global-set-key (kbd "C-M-a") 'org-agenda)

;; Escape quits agenda as expected.
(define-key org-agenda-mode-map (kbd "<escape>") 'org-agenda-quit)
;; Define familiar keys in agenda
;; (define-key org-agenda-mode-map (kbd "C-s") 'org-save-all-org-buffers)
(define-key org-agenda-mode-map (kbd "C-t") 'org-agenda-todo)

;; http://pragmaticemacs.com/emacs/org-mode-basics-vii-a-todo-list-with-schedules-and-deadlines/
;;warn me of any deadlines in next 7 days
(setq org-deadline-warning-days 7)
;;show me tasks scheduled or due in next fortnight
(setq org-agenda-span 'fortnight)
;;don't show tasks as scheduled if they are already shown as a deadline
;; (setq org-agenda-skip-scheduled-if-deadline-is-shown t)
;;don't give awarning colour to tasks with impending deadlines
;;if they are scheduled to be done
(setq org-agenda-skip-deadline-prewarning-if-scheduled 'pre-scheduled)
;;don't show tasks that are scheduled or have deadlines in the
;;normal todo list
;; Then, the global todo list becomes a way to check what todos
;; are not scheduled
(setq org-agenda-todo-ignore-deadlines 'all)
(setq org-agenda-todo-ignore-scheduled 'all)
#+END_SRC
** Capture
Capture templates are not set here as they may differ between platforms.
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-M-c") 'org-capture)
#+END_SRC
** Refile
This is absurdly powerful.N
https://blog.aaronbieber.com/2017/03/19/organizing-notes-with-refile.html
https://yiming.dev/blog/2018/03/02/my-org-refile-workflow/
#+BEGIN_SRC emacs-lisp
;; Possible targets are all agenda files
(setq org-refile-targets '((org-agenda-files :maxlevel . 3)))
(setq org-refile-use-outline-path 'file)
(setq org-outline-path-complete-in-steps nil)
(setq org-refile-allow-creating-parent-nodes 'confirm)

(defun +org-search ()
  (interactive)
  (org-refile '(4)))
;; (define-key org-mode-map (kbd "C-n") '+org-search)
#+END_SRC
* Which key
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :config
  (which-key-mode 1))
#+END_SRC
* Customize
Do not put customize in this file because it cannot be version controlled.
#+BEGIN_SRC emacs-lisp
(setq custom-file "~/.emacs.d/custom.el")
(if (file-exists-p custom-file)
   (load-file custom-file))
#+END_SRC
